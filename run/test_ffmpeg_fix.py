#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test FFmpeg Fix
Ki·ªÉm tra s·ª≠a l·ªói FFmpeg kh√¥ng t√¨m th·∫•y

T√°c gi·∫£: AI Assistant
Ng√†y t·∫°o: 2024
"""

import logging
import os
import sys

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_ffmpeg_fix.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def test_ffmpeg_path():
    """
    Test t√¨m ƒë∆∞·ªùng d·∫´n FFmpeg
    """
    try:
        logger.info("üß™ B·∫Øt ƒë·∫ßu test FFmpeg path...")
        
        # Test 1: T√¨m FFmpeg trong th∆∞ m·ª•c tools
        tools_ffmpeg = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'tools', 'ffmpeg.exe')
        logger.info(f"üîç FFmpeg trong tools: {tools_ffmpeg}")
        logger.info(f"üìÅ Exists: {os.path.exists(tools_ffmpeg)}")
        
        # Test 2: T√¨m FFmpeg trong PATH
        import shutil
        path_ffmpeg = shutil.which('ffmpeg')
        logger.info(f"üîç FFmpeg trong PATH: {path_ffmpeg}")
        
        # Test 3: Test ch·∫°y FFmpeg
        if os.path.exists(tools_ffmpeg):
            logger.info("‚úÖ FFmpeg trong tools t·ªìn t·∫°i")
            
            # Test ch·∫°y FFmpeg
            import subprocess
            try:
                result = subprocess.run([tools_ffmpeg, '-version'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    logger.info("‚úÖ FFmpeg ch·∫°y th√†nh c√¥ng")
                    logger.info(f"üìÑ Version: {result.stdout[:100]}...")
                else:
                    logger.error(f"‚ùå FFmpeg l·ªói: {result.stderr}")
            except Exception as e:
                logger.error(f"‚ùå L·ªói ch·∫°y FFmpeg: {str(e)}")
        else:
            logger.warning("‚ö†Ô∏è FFmpeg trong tools kh√¥ng t·ªìn t·∫°i")
        
        # Test 4: Test audio preprocessing function
        logger.info("üîß Testing audio preprocessing function...")
        
        # Import function t·ª´ all_in_one
        sys.path.append(os.path.dirname(os.path.dirname(__file__)))
        from all_in_one import AllInOneProcessor
        
        processor = AllInOneProcessor()
        
        # T·∫°o file audio test ƒë∆°n gi·∫£n
        test_audio_path = os.path.join(os.path.dirname(__file__), 'test_audio.mp3')
        
        # T·∫°o file audio test (1 gi√¢y silence)
        try:
            cmd = [
                tools_ffmpeg, '-y',
                '-f', 'lavfi',
                '-i', 'anullsrc=channel_layout=stereo:sample_rate=44100',
                '-t', '1',
                test_audio_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logger.info("‚úÖ T·∫°o file audio test th√†nh c√¥ng")
                
                # Test preprocessing
                processed_path = processor._preprocess_audio_for_timeline(test_audio_path)
                logger.info(f"‚úÖ Audio preprocessing: {processed_path}")
                
                # Cleanup
                if os.path.exists(test_audio_path):
                    os.remove(test_audio_path)
                    logger.info("üßπ ƒê√£ x√≥a file audio test")
                if os.path.exists(processed_path) and processed_path != test_audio_path:
                    os.remove(processed_path)
                    logger.info("üßπ ƒê√£ x√≥a file audio ƒë√£ x·ª≠ l√Ω")
                    
            else:
                logger.error(f"‚ùå L·ªói t·∫°o file audio test: {result.stderr}")
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói test audio preprocessing: {str(e)}")
        
        logger.info("‚úÖ Test FFmpeg fix ho√†n t·∫•t!")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói test FFmpeg fix: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")


if __name__ == "__main__":
    test_ffmpeg_path()
